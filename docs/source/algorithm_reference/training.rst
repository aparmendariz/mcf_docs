Training a Modified Causal Forest
=================================

Random forests are a group of decorrelated regression trees. Due to its non-parametric nature, the regression tree splits the data into non-overlapping strata. Subsequently, it computes the average of the dependent variable within each strata. These averages serve as the prediction for observations with similar covariate values. An issue with this approach is that using discrete, non-overlapping data splits can be inefficient, as it doesn't use information from neighboring data points. Additionally, the curse of dimensionality make it difficult to fit stable splits (or 'trees') with consistently good performance. Moreover, as the number of covariates increases, the number of potential data splits grows significantly. This can lead to exponential increases in computing time if all possible splits are evaluated at each node of the tree.

However, random forests solve these problems (to some extent) by building many decorrelated trees and averaging their predictions. This is achieved by using different random samples of the data to build each tree, generated by bootstrapping or subsampling, as well as random subsets of covariates for each splitting decision in an individual leaf within a developing tree. 

**Note**, the **mcf** differs from the causal forest of `Wager & Athey (2018) <https://doi.org/10.1080/01621459.2017.1319839>`_ with respect to the splitting criterion when growing the forest. 
Setting ``cf_mce_vart`` to ``2``, you may switch to the splitting rule of  `Wager & Athey (2018) <https://doi.org/10.1080/01621459.2017.1319839>`_. 

Apart from the difference in the splitting criterion, the regression forest may seem much related to the **mcf**. 
However, note that the underlying prediction tasks are fundamentally different. 
The **mcf** aims to predict causal effects, for which there is no data, and provides (asymptotically) valid inference. 
To impute the missing data, the **mcf** requires a causal model. 
To provide valid inference, the **mcf** borrows the concept of honesty introduced by `Athey & Imbens (2016) <https://doi.org/10.1073/pnas.1510489113>`_. 
For a textbook-like discussion refer to `Athey & Imbens (2016) <https://www.pnas.org/doi/10.1073/pnas.1510489113>`_.

Forest Growing
------------------------------------

The number of trees forming the forest is given by the argument ``cf_boot``. As a tree is grown, the algorithm greedily chooses the split which yields the best possible reduction of the objective function specified in ``cf_mce_vart``. The following objective criteria are implemented:

- Outcome Mean Squared Error (MSE)

- Outcome MSE and Mean Correlated Errors (MCE) 

- Variance of the Effect

- Random Switching: criterion randomly switches between outcome MSE and MCE and penalty functions which are defined under ``cf_p_diff_penalty``.

The outcome MSE is estimated as the sum of mean squared errors of the outcome regression in each treatment. 
The MCE depends on correlations between treatment states. For this reason, before building the trees, for each observation in each treatment state, the program finds a close ‘neighbor’ in every other treatment state and saves its outcome to then estimate the MCE. 

How the program matches is governed by the argument ``cf_match_nn_prog_score``. 
The program matches either by outcome scores (one per treatment) or on all covariates by Mahalanobis matching. If there are many covariates, it is advisable to match on outcome scores due to the curse of dimensionality. When performing Mahalanobis matching, a practical issue may be that the required inverse of the covariance matrix is unstable. For this reason the program allows to only use the main diagonal to invert the covariance matrix. This is regulated via the argument ``cf_nn_main_diag_only``. 

Likewise, the program allows for a modification of the splitting rule by adding a penalty to the objective function specified in ``cf_mce_vart``. The idea to use a penalty based on the propensity score is to increase treatment homogeneity within new splits to reduce selection bias. The penalty function is passed over to the program via the argument ``cf_p_diff_penalty``. Note that from ``cf_mce_vart`` only option (3) random switching cannot work without the penalty. 

Once the forest is ready for training, the splits obtained in the training dataset are transferred to all data subsamples (by treatment state) in the held-out data set. Finally, the mean of the outcomes in each leaf is the prediction.

Below you find a list of the discussed parameters that are relevant for forest growing. Please consult the :py:class:`API <mcf_functions.ModifiedCausalForest>` for more details or additional parameters. 

+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Parameter                 | Description                                                                                                                                                                                                     |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``cf_boot``               | Number of Causal Trees. Default (or None) is 1000.                                                                                                                                                              |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``cf_mce_vart``           | Splitting rule for tree building, 0 for MSE, 1 for MSE+MCE, 2 for heterogeneity maximization, or 3 for random switching between MSE, MCE and penalty function defined in ``cf_p_diff_penalty`` . Default is 1.  |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``cf_p_diff_penalty``     | Penalty function used during tree building, dependent on ``cf_mce_vart``. Default is None.                                                                                                                      |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``cf_match_nn_prog_score``| Choice of method of nearest neighbour matching. True: Prognostic scores. False: Inverse of covariance matrix of features. Default (or None) is True.                                                            |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``cf_nn_main_diag_only``  | Nearest neighbour matching: Use main diagonal of covariance matrix only. Only relevant if match_nn_prog_score == False. Default (or None) is False.                                                             |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Example
~~~~~~~

.. code-block:: python

    my_mcf = ModifiedCausalForest(
        var_y_name="y",
        var_d_name="d",
        var_x_name_ord=["x1", "x2"],
        # Number of trees (default is 1000)
        cf_boot = 500, 
        # Determine splitting rule when growing trees
        cf_mce_vart = 3, 
        # Determine penalty function
        cf_p_diff_penalty = 3, 
        # Determine method of nearest neighbour matching
        cf_match_nn_prog_score = True
    )


Parameter tuning
------------------------------------

The **mcf** allows for a grid search over tree tuning parameters: 

- Number of variables drawn at each split

- Alpha-Regularity

- Minimum leaf size

In practical terms, for all possible combinations, a forest is estimated fixing a random seed. 

**Note**: The finer the grid-search, the more forests are estimated, which slows down computation time. To identify the best values from the grid-search, the program implements the out-of-bag estimation of the chosen objective. The best performing forest based on its out-of-bag value of its objective function is taken for further computations.

Below you find a list of the discussed parameters that are relevant for parameter tuning. Please consult the :py:class:`API <mcf_functions.ModifiedCausalForest>` for more details or additional parameters.

+-----------------------+-----------------------------------------------------------------------------+
| Argument              | Description                                                                 |
+-----------------------+-----------------------------------------------------------------------------+
| ``cf_m_share_min``    | Minimum share of variables used at each new split of tree. Default is 0.1.  |
+-----------------------+-----------------------------------------------------------------------------+
| ``cf_m_share_max``    | Maximum share of variables used at each new split of tree. Default is 0.6.  |
+-----------------------+-----------------------------------------------------------------------------+
| ``cf_m_grid``         | Number of variables used at each new split of tree. Default is 1.           |
+-----------------------+-----------------------------------------------------------------------------+
| ``cf_alpha_reg_grid`` | Number of grid values. Default is 1.                                        |
+-----------------------+-----------------------------------------------------------------------------+
| ``cf_n_min_min``      | Determines smallest minimum leaf size. Default is None.                     |
+-----------------------+-----------------------------------------------------------------------------+
| ``cf_n_min_max``      | Determines largest minimum leaf size. Default is None.                      |
+-----------------------+-----------------------------------------------------------------------------+

**Note**: The smaller the minimum leaf size, the longer is the computation time, as the tree is grown deeper. This increase in computation time can be substantial for large data.


Example
~~~~~~~

.. code-block:: python

    my_mcf = ModifiedCausalForest(
        var_y_name="y",
        var_d_name="d",
        var_x_name_ord=["x1", "x2"],
        # Minimum share of variables used at each new split of tree
        cf_m_share_min = 0.15, 
        # Number of variables used at each new split of tree
        cf_m_grid = 2, 
        # Determines smallest minimum leaf size
        cf_n_min_min = 5
    )


Computational speed
---------------------

- **Parallel Processing**: 

  - ``gen_mp_parallel``: defines the number of parallel processes. The program can take advantage of multiple cores for parallel processing. The ``gen_mp_parallel`` option can be set to the number of cores to be used. If not specified, the program will use all available cores.

- **Causal Forest, Subsampling,  **: 

  - ``cf_boot``
  - ``cf_chunks_maxsize``
  - ``cf_m_grid``: 
  - ``cf_subsample_factor_eval``: Subsampling can be used to reduce the size of the dataset that the program needs to process. The ``cf_subsample_factor_eval``. 
  - ``cf_random_thresholds``: The ``cf_random_thresholds`` option can be used to enable the use of random thresholds in the decision trees, which can speed up the tree generation process.

- **Predicting effects**: 

  - ``p_choice_based_sampling``

Please refer to the :py:class:`API <mcf_functions.ModifiedCausalForest>` for a detailed description of these and other options. Adjusting these options can help to significantly reduce the computational time, but it may also affect the accuracy of the results. Therefore, it is recommended to understand the implications of each option before adjusting them.








